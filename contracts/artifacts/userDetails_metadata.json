{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "eventDeleteUser",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_address",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "enum IUserDetails.userType",
						"name": "_type",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "_name",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "_physicalAddress",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "_image",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_timeUpdated",
						"type": "uint256"
					}
				],
				"name": "eventUserData",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "enum IUserDetails.userType",
						"name": "_type",
						"type": "uint8"
					},
					{
						"internalType": "bytes",
						"name": "_name",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "_physicalAddress",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "_image",
						"type": "bytes"
					}
				],
				"name": "addUser",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "deleteUser",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "distributors",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "_image",
						"type": "bytes"
					}
				],
				"name": "editImage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "_name",
						"type": "bytes"
					}
				],
				"name": "editName",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "_physicalAddress",
						"type": "bytes"
					}
				],
				"name": "editPhysicalAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllDistributors",
				"outputs": [
					{
						"components": [
							{
								"internalType": "enum IUserDetails.userType",
								"name": "userType",
								"type": "uint8"
							},
							{
								"internalType": "bytes",
								"name": "userName",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "userPhysicalAddress",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "userImage",
								"type": "bytes"
							},
							{
								"internalType": "bool",
								"name": "userStatus",
								"type": "bool"
							}
						],
						"internalType": "struct IUserDetails.userDetails[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllManufacturers",
				"outputs": [
					{
						"components": [
							{
								"internalType": "enum IUserDetails.userType",
								"name": "userType",
								"type": "uint8"
							},
							{
								"internalType": "bytes",
								"name": "userName",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "userPhysicalAddress",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "userImage",
								"type": "bytes"
							},
							{
								"internalType": "bool",
								"name": "userStatus",
								"type": "bool"
							}
						],
						"internalType": "struct IUserDetails.userDetails[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllSuppliers",
				"outputs": [
					{
						"components": [
							{
								"internalType": "enum IUserDetails.userType",
								"name": "userType",
								"type": "uint8"
							},
							{
								"internalType": "bytes",
								"name": "userName",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "userPhysicalAddress",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "userImage",
								"type": "bytes"
							},
							{
								"internalType": "bool",
								"name": "userStatus",
								"type": "bool"
							}
						],
						"internalType": "struct IUserDetails.userDetails[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllUsers",
				"outputs": [
					{
						"components": [
							{
								"internalType": "enum IUserDetails.userType",
								"name": "userType",
								"type": "uint8"
							},
							{
								"internalType": "bytes",
								"name": "userName",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "userPhysicalAddress",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "userImage",
								"type": "bytes"
							},
							{
								"internalType": "bool",
								"name": "userStatus",
								"type": "bool"
							}
						],
						"internalType": "struct IUserDetails.userDetails[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "getSingleUser",
				"outputs": [
					{
						"components": [
							{
								"internalType": "enum IUserDetails.userType",
								"name": "userType",
								"type": "uint8"
							},
							{
								"internalType": "bytes",
								"name": "userName",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "userPhysicalAddress",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "userImage",
								"type": "bytes"
							},
							{
								"internalType": "bool",
								"name": "userStatus",
								"type": "bool"
							}
						],
						"internalType": "struct IUserDetails.userDetails",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "manufacturers",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "suppliers",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "userDetailsMapping",
				"outputs": [
					{
						"internalType": "enum IUserDetails.userType",
						"name": "userType",
						"type": "uint8"
					},
					{
						"internalType": "bytes",
						"name": "userName",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "userPhysicalAddress",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "userImage",
						"type": "bytes"
					},
					{
						"internalType": "bool",
						"name": "userStatus",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "users",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"addUser(uint8,bytes,bytes,bytes)": {
					"notice": "function to add the user"
				},
				"deleteUser()": {
					"notice": "Function to delete the user"
				},
				"editImage(bytes)": {
					"notice": "function to edit the Image of the user"
				},
				"editName(bytes)": {
					"notice": "function to edit the name of the user"
				},
				"editPhysicalAddress(bytes)": {
					"notice": "function to edit the physical address of the user"
				},
				"getAllDistributors()": {
					"notice": "function to return all the users registered as distributors"
				},
				"getAllManufacturers()": {
					"notice": "function to return all the users registered as manufacturers"
				},
				"getAllSuppliers()": {
					"notice": "function to return all the users registered as suppliers"
				},
				"getAllUsers()": {
					"notice": "function to return all the users registered on provyLens"
				},
				"getSingleUser(address)": {
					"notice": "function to return user details of any perticular user"
				},
				"userDetailsMapping(address)": {
					"notice": "mapping address with userDetails struct"
				},
				"users(uint256)": {
					"notice": "array to keep track of user' catogery"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/userDetails.sol": "userDetails"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/Interfaces/IUserDetails.sol": {
			"keccak256": "0x3341292461d44d7534575b8c7be033e0688ed6b555bc79071f39b2e2b3fbb855",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://595cb991961eff351b424554db7212532719bfb7240a6a02c86e78912ac7910d",
				"dweb:/ipfs/QmXTm27Xu6VfFWHngGy7on9ctJzAetmdRVwyKiXuHSB2R4"
			]
		},
		"contracts/userDetails.sol": {
			"keccak256": "0x33212216475fe7eb289f12d2ed9a0100d4263b3780ba157fb6620cd6f9f6b3d7",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://8a25a2c2955e6ab6a6a3ca1e05994305d7b7b150aa8a679ec9f9195d7d97a340",
				"dweb:/ipfs/QmavgdbNkajLLfFcyyCvkxzCyYEhezwe4y34VcvLYouXiD"
			]
		}
	},
	"version": 1
}